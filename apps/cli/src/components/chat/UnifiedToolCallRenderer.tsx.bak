import { Code, Column, Text } from "@/components/index.js";
import { toolRegistry } from "@/tools/registry.js";
import { memo, useMemo } from "react";
import { processToolArguments, type UnifiedToolCall } from "./utils/tool-call-utils.js";

export const UnifiedToolCallRenderer = memo(({ toolCall }: { toolCall: UnifiedToolCall }) => {
  const displayArgs: Record<string, any> = useMemo(() => {
    return processToolArguments(toolCall.args);
  }, [toolCall.args]);

  if (!toolCall.name) {
    return null;
  }

  // Show error state if there's an error
  if (toolCall.hasError) {
    return (
      <Column paddingBottom={1}>
        <Text>{toolCall.name}</Text>
        {toolCall.errorMessage && (
          <Text dimColor>
            {toolCall.errorMessage}
          </Text>
        )}
      </Column>
    );
  }

  const tool = toolRegistry.getTool(toolCall.name);

  // If the tool has a custom renderer, use it
  if (tool?.Renderer) {
    const Renderer = tool.Renderer;
    return (
      <Column paddingBottom={1}>
        <Renderer
          args={displayArgs}
          hasError={toolCall.hasError}
          errorMessage={toolCall.errorMessage}
        />
      </Column>
    );
  }

  // Otherwise, fall back to the generic default display with syntax highlighting.
  const hasArgs = Object.keys(displayArgs).length > 0;

  if (!hasArgs) {
    return (
      <Column paddingBottom={1}>
        <Text>{toolCall.name}</Text>
      </Column>
    );
  }

  const jsonString = JSON.stringify(displayArgs, null, 2);
  
  return (
    <Column paddingBottom={1}>
      <Text>{toolCall.name}</Text>
      <Column paddingLeft={2} paddingTop={1}>
        <Code language="json">{jsonString}</Code>
      </Column>
    </Column>
  );
});

UnifiedToolCallRenderer.displayName = "UnifiedToolCallRenderer";