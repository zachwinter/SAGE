import {
  ChatMessage,
  type ToolCallRequest as ToolCallRequestType
} from "@lmstudio/sdk";
import {
  Column,
  Text
} from "@/components/index.js";
import { memo } from "react";
import { UnifiedToolCallRenderer } from "./UnifiedToolCallRenderer.js";
import { UnifiedToolCallResult } from "./UnifiedToolCallResult.js";
import { 
  generateToolCallKey, 
  normalizeStaticToolCall 
} from "./utils/tool-call-utils.js";

interface MessageProps {
  message: ChatMessage;
  allRequests?: Map<string, ToolCallRequestType>;
}

export const Message = memo(({ message, allRequests }: MessageProps) => {
  const text = message.getText() ?? "";
  const requests = message.getToolCallRequests() ?? [];
  const results = message.getToolCallResults() ?? [];
  const role = message.getRole();

  return (
    <Column paddingBottom={1}>
      {text && role === "user" && (
        <Text
          bold
          dimColor
        >
          {text}
        </Text>
      )}
      {text && role === "assistant" && <Text>{text}</Text>}

      {requests.map(r => {
        const unified = normalizeStaticToolCall(r);
        return (
          <UnifiedToolCallRenderer
            key={generateToolCallKey(unified)}
            toolCall={unified}
          />
        );
      })}

      {results.map(result => {
        if (result?.toolCallId) {
          const request = allRequests?.get(result?.toolCallId);
          if (request) {
            const unified = normalizeStaticToolCall(request, result.content);
            return (
              <UnifiedToolCallResult
                key={`result-${result.toolCallId}`}
                toolCall={unified}
              />
            );
          }
        }
        return null;
      })}
    </Column>
  );
});

Message.displayName = "Message";
